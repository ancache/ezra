* todo items
** TODO GET params should filter what the db returns
** TODO the hit needs transcript boundary location times
* workflow
** Initialize everything
1. $ rails new ezra0 --skip--test-unit
2. update gemfile && $ bundle update; bundle install
   - note that guard-spork version needs to be updated => 1.4.1
** Rspec, guard, spork
1. $ rails generate rspec:install
2. $ guard init rspec
3. update Guardfile
   + http://ruby.railstutorial.org/chapters/static-pages#code-guardfile
4. spork --bootstrap
5. update spec helper
   - [[http://ruby.railstutorial.org/chapters/static-pages#code-spork_spec_helper][spec/spec_helper.rb]]
6. add --drb to .rspec
7. $ guard init spork
8. move spork stuff to top of Guardfile
** Create static pages
1. generate static pages controller
   - $ rails generate controller StaticPages home help --no-test-framework
   - results: (- for _)
      create  app/controllers/static-pages-controller.rb
       route  get "static-pages/help"
       route  get "static-pages/home"
      invoke  erb
      create    app/views/static-pages
      create    app/views/static-pages/home.html.erb
      create    app/views/static-pages/help.html.erb
      invoke  helper
      create    app/helpers/static-pages-helper.rb
      invoke  assets
      invoke    coffee
      create      app/assets/javascripts/static-pages.js.coffee
      invoke    scss
      create      app/assets/stylesheets/static-pages.css.scss
2. $ rails generate integration-test static-pages (-_)

** other workflows
*** adding a static page
1. write tests describing the content of the page
2. update config/routes.rb
3. update StaticPages controller
4. add a view in app/views/static-pages/
5. green


* stories
** public user
- visit the site; learn about the project
- learn about individual targets/sets of targets
- listen to individual sound files

* design
** header
*** always:
**** home/ezra
**** about
**** links
**** people?
**** publications?
*** not logged in:
**** log in

*** logged in:

**** log out
*** admin user:
**** admin
** footer
*** debug info
-       <%= render 'layouts/footer' %>
      <%= debug(params) if Rails.env.development? %>
        
** index body

* notes
- consider simple-form gem for form stuff


* restful actions
** actions and permissions
| HTTP req. | URI              | Action  | Named route                | Purpose            | Permission     |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| GET       | /users           | index   | users-path                 | list all users     | admin          |
| GET       | /users/1         | show    | user-path(user)            | show user          | admin          |
| GET       | /users/new       | new     | new-user-path              | new user  form     | admin          |
| POST      | /users           | create  | users-path                 | create new user    | admin          |
| GET       | /users/1/edit    | edit    | edit-user-path(user)       | edit user 1        | admin or owner |
| PUT       | /users/1         | update  | user-path(user)            | update user        | admin or owner |
| DELETE    | /users/1         | destroy | user-path(user)            | delete user        | nobody         |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| HTTP req. | URI              | Action  | Named route                | Purpose            | Permission     |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| GET       | /targets         | index   | targets-path               | list all targets   | user           |
| GET       | /targets/1       | show    | target-path(target)        | show target        | user           |
| GET       | /targets/new     | new     | new-target-path            | new target form    | admin          |
| POST      | /targets         | create  | targets-path               | create new target  | admin          |
| GET       | /targets/1/edit  | edit    | edit-target-path(target)   | edit target 1      | admin          |
| PUT       | /targets/1       | update  | target-path(target)        | update target      | admin          |
| DELETE    | /targets/1       | destroy | target-path(target)        | delete target      | nobody         |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| HTTP req. | URI              | Action  | Named route                | Purpose            | Permission     |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| GET       | /features        | index   | features-path              | list all features  | user           |
| GET       | /features/1      | show    | feature-path(feature)      | show feature       | user           |
| GET       | /features/new    | new     | new-feature-path           | new feature form   | admin          |
| POST      | /features        | create  | features-path              | create new feature | admin          |
| GET       | /features/1/edit | edit    | edit-feature-path(feature) | edit feature       | admin          |
| PUT       | /features/1      | update  | feature-path(feature)      | update feature     | admin          |
| DELETE    | /features/1      | destroy | feature-path(feature)      | delete feature     | nobody         |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| HTTP req. | URI              | Action  | Named route                | Purpose            | Permission     |
|-----------+------------------+---------+----------------------------+--------------------+----------------|
| GET       | /hits            | index   | hits-path                  | list all hits      | user           |
| GET       | /hits/1          | show    | hit-path(hit)              | show hit           | user           |
| GET       | /hits/new        | new     | new-hit-path               | new hit form       | admin          |
| POST      | /hits            | create  | hits-path                  | create new hit     | admin          |
| GET       | /hits/1/edit     | edit    | edit-hit-path(hit)         | edit hit           | user           |
| PUT       | /hits/1          | update  | hit-path(hit)              | update hit         | user           |
| DELETE    | /hits/1          | destroy | hit-path(hit)              | delete hit         | nobody         |
|-----------+------------------+---------+----------------------------+--------------------+----------------|

* tests
- unit tests: individual components
- functional tests: individual controllers
- integration tests: specific workflows
